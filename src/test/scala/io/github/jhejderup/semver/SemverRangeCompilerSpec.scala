package io.github.jhejderup.semver.compiler

import org.scalatest._

class SemverRangeCompilerSpec extends FlatSpec with Matchers {
  "The SemverRangeCompiler object" should "equal true" in {
    //https://github.com/npm/node-semver/blob/master/test/index.js#L459
    val validRangeTest = List[(String, String)](
      ("1.0.0 - 2.0.0", ">=1.0.0 <=2.0.0"),
      ("1.0.0", "1.0.0"),
      (">=*", ">=0.0.0"), // (">=*", "*"), // we evaluate any op + * as * e.g <* := * https://github.com/npm/node-semver/blob/d21444a0658224b152ce54965d02dbe0856afb84/semver.js#L225
      ("", ">=0.0.0"),    //  ("", "*"),
      ("*", ">=0.0.0"),          // ("*", "*"),
//      ("*", "*"),      //duplicate!!
      (">=1.0.0", ">=1.0.0"),
      (">1.0.0", ">1.0.0"),
      ("<=2.0.0", "<=2.0.0"),
      ("1", ">=1.0.0 <2.0.0"),
      ("<=2.0.0", "<=2.0.0"),
      ("<=2.0.0", "<=2.0.0"),
      ("<2.0.0", "<2.0.0"),
      ("<2.0.0", "<2.0.0"),
      (">= 1.0.0", ">=1.0.0"),
      (">=  1.0.0", ">=1.0.0"),
      (">=   1.0.0", ">=1.0.0"),
      ("> 1.0.0", ">1.0.0"),
      (">  1.0.0", ">1.0.0"),
      ("<=   2.0.0", "<=2.0.0"),
      ("<= 2.0.0", "<=2.0.0"),
      ("<=  2.0.0", "<=2.0.0"),
      ("<    2.0.0", "<2.0.0"),
      ("< 2.0.0", "<2.0.0"),
      (">=0.1.97", ">=0.1.97"),
      (">=0.1.97", ">=0.1.97"),
      ("0.1.20 || 1.2.4", "0.1.20||1.2.4"),
      (">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"),
      (">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"),
      (">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"),
//      ("||", "||"), --> should we support?
      ("2.x.x", ">=2.0.0 <3.0.0"),
      ("1.2.x", ">=1.2.0 <1.3.0"),
      ("1.2.x || 2.x", ">=1.2.0 <1.3.0||>=2.0.0 <3.0.0"),
      ("1.2.x || 2.x", ">=1.2.0 <1.3.0||>=2.0.0 <3.0.0"),
      ("x", ">=0.0.0"),  //      ("x", "*"),
      ("2.*.*", ">=2.0.0 <3.0.0"),
      ("1.2.*", ">=1.2.0 <1.3.0"),
      ("1.2.* || 2.*", ">=1.2.0 <1.3.0||>=2.0.0 <3.0.0"),
//      ("*", "*"), // duplicate!
      ("2", ">=2.0.0 <3.0.0"),
      ("2.3", ">=2.3.0 <2.4.0"),
      ("~2.4", ">=2.4.0 <2.5.0"),
      ("~2.4", ">=2.4.0 <2.5.0"),
      ("~>3.2.1", ">=3.2.1 <3.3.0"),
      ("~1", ">=1.0.0 <2.0.0"),
      ("~>1", ">=1.0.0 <2.0.0"),
      ("~> 1", ">=1.0.0 <2.0.0"),
      ("~1.0", ">=1.0.0 <1.1.0"),
      ("~ 1.0", ">=1.0.0 <1.1.0"),
      ("^0", ">=0.0.0 <1.0.0"),
      ("^ 1", ">=1.0.0 <2.0.0"),
      ("^0.1", ">=0.1.0 <0.2.0"),
      ("^1.0", ">=1.0.0 <2.0.0"),
      ("^1.2", ">=1.2.0 <2.0.0"),
      ("^0.0.1", ">=0.0.1 <0.0.2"),
      ("^0.0.1-beta", ">=0.0.1-beta <0.0.2"),
      ("^0.1.2", ">=0.1.2 <0.2.0"),
      ("^1.2.3", ">=1.2.3 <2.0.0"),
      ("^1.2.3-beta.4", ">=1.2.3-beta.4 <2.0.0"),
      ("<1", "<1.0.0"),
      ("< 1", "<1.0.0"),
      (">=1", ">=1.0.0"),
      (">= 1", ">=1.0.0"),
      ("<1.2", "<1.2.0"),
      ("< 1.2", "<1.2.0"),
      ("1", ">=1.0.0 <2.0.0"),
//    //  (">01.02.03", ">1.2.3", true),  --- this for loose case, not supported yet
//    //  (">01.02.03", null),  --- this for loose case, not supported yet
//      ("~1.2.3beta", ">=1.2.3-beta <1.3.0", true), --- this for loose case, not supported yet
//    //  ("~1.2.3beta", null),  --- this for loose case, not supported yet
      ("^ 1.2 ^ 1", ">=1.2.0 <2.0.0 >=1.0.0 <2.0.0")
    )


    for {
      range <- validRangeTest
    } yield SemverRangeCompiler(range._1).right.get.transform().toString should equal(range._2)

  }
}
